{
	"info": {
		"_postman_id": "e57d975e-ab04-4f88-9590-4d810d34d7ef",
		"name": "Project Todos-Postman-Pipelines",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36278398"
	},
	"item": [
		{
			"name": "Add New City",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let id = jsonData.id;\r",
							"\r",
							"let requestJsonData = pm.request.body.raw;\r",
							"\r",
							"let requestData = JSON.parse(requestJsonData);\r",
							"// Set the collection variable\r",
							"\r",
							" pm.collectionVariables.set(\"createdCityId\", id);\r",
							" pm.collectionVariables.set(\"title\", requestData.title);\r",
							"pm.collectionVariables.set(\"description\", requestData.description);\r",
							"\r",
							"// Test that status code is 200\r",
							"pm.test(\"status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Test that response time is under 300ms\r",
							"pm.test(\"response is under 300ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"// Test that the returned data is an object and is correct\r",
							"pm.test(\"returned data is an object and is correct\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.title).to.eql(requestData.title);\r",
							"    pm.expect(jsonData.description).to.eql(requestData.description);\r",
							"});\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const basetitle = 'user_';\r",
							"const uniquetitle = basetitle + Date.now();\r",
							"\r",
							"pm.collectionVariables.set('uniquetitle', \r",
							"    uniquetitle);\r",
							"pm.collectionVariables.set('uniquedescription', uniquetitle + \" miestas\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{uniquetitle}}\",\r\n    \"description\" : \"{{uniquedescription}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New City unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"// Test that response time is under 500ms\r",
							"pm.test(\"response is under 500ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(500);})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \r\n    \"description\":\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All City's",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that status code is 200\r",
							"pm.test(\"status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test that the response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"pm.test(\"the data is an array and has correct data\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    // Check that jsonData is an array\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"\r",
							"    // Check that each item in the array is an object with the expected properties\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('title');\r",
							"        pm.expect(item).to.have.property('description');\r",
							"    });\r",
							"});\r",
							"// Test that response time is under 500ms\r",
							"pm.test(\"response is under 500ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get City by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that status code is 200\r",
							"pm.test(\"status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test that the response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"pm.test(\"the data is an object and has correct data\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.exist;\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"createdCityId\"));\r",
							"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"title\"));\r",
							"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get(\"description\"));\r",
							"});\r",
							"// Test that response time is under 500ms\r",
							"pm.test(\"response is under 500ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/todos/{{createdCityId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdCityId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update City by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"// Test that response time is under 500ms\r",
							"pm.test(\"response is under 500ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(500);})\r",
							"// Test that the response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"// Test that the response contains the expected fields\r",
							"pm.test(\"Response contains expected fields\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"title\");\r",
							"    pm.expect(jsonData).to.have.property(\"description\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 25,\r\n    \"title\": \"Šiauliai\",\r\n    \"description\" : \"Saulės miestas Lietuvoje\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos/{{createdCityId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdCityId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update City by Id unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(400);\r",
							"});\r",
							"// Test that response time is under 500ms\r",
							"pm.test(\"response is under 500ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(500);})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \r\n    \"title\": \r\n    \"description\":\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos/{{createdCityId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdCityId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete City by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that the status code is 200 (or appropriate success code)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test that response time is under 500ms\r",
							"pm.test(\"response is under 500ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(500);})\r",
							"// Ensure the response is in JSON format (if your API returns a JSON response for DELETE)\r",
							"pm.test(\"Response is in JSON format\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos/{{createdCityId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdCityId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete City by Id unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Ensure the response status code indicates a failure (e.g., 404 Not Found)\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"// Test that response time is under 500ms\r",
							"pm.test(\"response is under 500ms\", () => {\r",
							"pm.expect(pm.response.responseTime).to.be.below(500)});\r",
							"\r",
							"// Test for the message in the response\r",
							"pm.test(\"Response contains message\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.eql(\"Todo not found.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/todos/{{createdCityId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos",
						"{{createdCityId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All City's",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that status code is 200\r",
							"pm.test(\"status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test that the response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"pm.test(\"the data is an array and has correct data\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    // Check that jsonData is an array\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"\r",
							"    // Check that each item in the array is an object with the expected properties\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.be.an('object');\r",
							"        pm.expect(item).to.have.property('id');\r",
							"        pm.expect(item).to.have.property('title');\r",
							"        pm.expect(item).to.have.property('description');\r",
							"    });\r",
							"});\r",
							"// Test that response time is under 500ms\r",
							"pm.test(\"response is under 500ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/todos",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"todos"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "uniquetitle",
			"value": ""
		},
		{
			"key": "uniquedescription",
			"value": ""
		},
		{
			"key": "createdCityId",
			"value": "",
			"type": "string"
		},
		{
			"key": "title",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		}
	]
}